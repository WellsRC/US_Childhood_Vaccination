clear;
clc;
% parpool(24);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
% Validation subsets
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

Spatial_Set=[1:4];
Time_Set=[2017:2023];

Spatial_Validation=1; 
Time_Validation=[2017:2018];

Spatial_Training=Spatial_Set(~ismember(Spatial_Set,Spatial_Validation)); 
Time_Training=Time_Set(~ismember(Time_Set,Time_Validation)); 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
% Vaccination data to explore
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

[County_Data,State_Data] = Load_Data('MMR');

filter_county_train= ismember(County_Data.Spatail_Identifier,Spatial_Training) & ismember(County_Data.Year,Time_Training);
filter_state_train= ismember(State_Data.Spatail_Identifier,Spatial_Training) & ismember(State_Data.Year,Time_Training);

filter_county_temporal_validation= ismember(County_Data.Year,Time_Validation);
filter_state_temporal_validation= ismember(State_Data.Year,Time_Validation);

filter_county_spatial_validation= ismember(County_Data.Spatail_Identifier,Spatial_Validation) & ismember(County_Data.Year,Time_Training);
filter_state_spatial_validation= ismember(State_Data.Spatail_Identifier,Spatial_Validation) & ismember(State_Data.Year,Time_Training);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
% Model index for fitting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
Model_Var=false(2^8,45);

Var_Names={'Age','Race','Income','Gini_Index','Health_Insurance','Education','Poverty_Income_Ratio','Rural_Urban_Code'};

Model_Var(:,[1 2])=true;

temp_var=false(8,45);
temp_var(1,3:7)=true;
temp_var(2,8:12)=true;
temp_var(3,13)=true;
temp_var(4,14)=true;
temp_var(5,15:17)=true;
temp_var(6,18:24)=true;
temp_var(7,25:36)=true;
temp_var(8,37:45)=true;

bin_model=dec2bin([0:2^8-1]',8)=='1';
[~,srt_indx]=sort(sum(bin_model,2),'ascend');
bin_model=bin_model(srt_indx,:);

for ii=1:2^8
    temp_overall=false(1,45);
    for jj=1:8
        if(bin_model(ii,jj))
            temp_overall=temp_overall|temp_var(jj,:);
        end
    end
    Model_Var(ii,:)=Model_Var(ii,:) | temp_overall;
end

model_par=cell(2^8,1);
L_fit=zeros(2^8,1);
L_spatial_val=zeros(2^8,1);
L_temporal_val=zeros(2^8,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Run fitting and validation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub_par=zeros(2^8,45);

for sub_model=0:8
    if sub_model==0
        sub_fit=[];
    else
        sub_fit=sub_par(sum(bin_model,2)<sub_model,:);
    end

    model_start=find(sum(bin_model,2)==sub_model,1,"first");
    model_end=find(sum(bin_model,2)==sub_model,1,"last");
    parfor model_num=model_start:model_end
        County_Data_model=County_Data;
        County_Data_model.X=County_Data_model.X(:,Model_Var(model_num,:));
    
        lb=-20.*ones(1,sum(Model_Var(model_num,:))+3);
        lb(end-1:end)=-1;
        ub=20.*ones(1,sum(Model_Var(model_num,:))+3);
        ub(end-1:end)=1;

        if(isempty(sub_fit))
            opts_ps=optimoptions('particleswarm','MaxIterations',25,'FunctionTolerance',10^(-6),'PlotFcn',[],'UseParallel',false);
        else
            ps_0=sub_fit(:,[true Model_Var(model_num,:) true(1,2)]);
            opts_ps=optimoptions('particleswarm','MaxIterations',25,'FunctionTolerance',10^(-6),'PlotFcn',[],'UseParallel',false,'InitialPoints',ps_0);
        end
        par_0=zeros(10,length(lb));
        for ss=1:10
            par_0(ss,:)=particleswarm(@(x)Objective_Function_Coverage(x,County_Data_model,State_Data,filter_county_train,filter_state_train),length(lb),lb,ub,opts_ps);
        end
        
        opts_ga=optimoptions("ga","PlotFcn",[],'UseParallel',false,"MaxGenerations",50,"FunctionTolerance",10^(-9),'CrossoverFcn','crossoverheuristic','MigrationInterval',25,'SelectionFcn',{@selectiontournament,8},'PopulationSize',250,'InitialPopulationMatrix',par_0);
        [par_est]=ga(@(x)Objective_Function_Coverage(x,County_Data_model,State_Data,filter_county_train,filter_state_train),length(lb),[],[],[],[],lb,ub,[],[],opts_ga);
    
        opts_pats=optimoptions('patternsearch','UseParallel',false,"PlotFcn",[],'FunctionTolerance',10^(-12),'MaxIterations',750,'StepTolerance',10^(-9),'MaxFunctionEvaluations',10^4,'Cache','on');
        [par_final,f_final]=patternsearch(@(x)Objective_Function_Coverage(x,County_Data_model,State_Data,filter_county_train,filter_state_train),par_est,[],[],[],[],lb,ub,[],opts_pats);

        model_par{model_num}=par_final;
        L_fit(model_num)=-f_final;
        L_spatial_val(model_num)=-Objective_Function_Coverage(par_final,County_Data_model,State_Data,Spatial_Validation,Time_Validation);
        L_temporal_val(model_num)=-Objective_Function_Coverage(par_final,County_Data_model,State_Data,Spatial_Validation,Time_Validation);
    end

    for model_num=model_start:model_end        
        sub_par(model_num,[true Model_Var(model_num,:) true(1,2)])=model_par{model_num};
    end
end
save(['MMR_Set_Spatial_Validation=' num2str(Spatial_Validation) '_Time_Validation=' num2str(Time_Validation) '.mat'],'model_par','L_fit','L_spatial_val');

